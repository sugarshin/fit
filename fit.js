// Generated by CoffeeScript 1.9.0
(function(root, factory) {
  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = factory(require('jquery'));
  } else {
    root.Fit || (root.Fit = factory(root.jQuery));
  }
})(this, function($) {
  "use strict";
  var Fit;
  return Fit = (function() {
    var _$window;

    _$window = $(window);

    Fit.prototype._defaults = {
      type: 'cover',
      res: 0.5625,
      maxHeight: null,
      minHeight: null,
      lineHeight: false
    };

    Fit.prototype._configure = function(el, opts) {
      this.$el = $(el);
      return this.opts = $.extend({}, this._defaults, opts);
    };

    function Fit(_at_el, opts) {
      this.el = _at_el;
      this._configure(this.el, opts);
      this.resize();
    }

    Fit.prototype.setWindowSize = function() {
      var windowHeight;
      this._windowWidth = _$window.width();
      windowHeight = _$window.height();
      if (this.opts.maxHeight != null) {
        this._windowHeight = this.opts.maxHeight;
      } else if ((this.opts.minHeight != null) && windowHeight < this.opts.minHeight) {
        this._windowHeight = this.opts.minHeight;
      } else {
        this._windowHeight = windowHeight;
      }
      return this;
    };

    Fit.prototype.getWindowSize = function() {
      return [this._windowWidth, this._windowHeight];
    };

    Fit.prototype.calcSize = function() {
      var displayRes;
      this.setWindowSize();
      displayRes = this.getWindowSize()[1] / this.getWindowSize()[0];
      if (this.opts.res > displayRes) {
        this._width = this.getWindowSize()[0];
        this._height = this._width * this.opts.res;
        this._marginTop = -((this._height - this.getWindowSize()[1]) / 2);
        this._marginLeft = 0;
      } else {
        this._width = this.getWindowSize()[1] / this.opts.res;
        this._height = this._width * this.opts.res;
        this._marginTop = 0;
        this._marginLeft = -((this._width - this.getWindowSize()[0]) / 2);
      }
      return this;
    };

    Fit.prototype.cover = function() {
      this.calcSize();
      this.$el.css({
        width: this._width,
        height: this._height,
        marginTop: this._marginTop,
        marginLeft: this._marginLeft
      });
      if (this.opts.lineHeight === true) {
        this.$el.css({
          lineHeight: this._height + "px"
        });
      }
      return this;
    };

    Fit.prototype.contain = function() {};

    Fit.prototype.resize = function() {
      if (this.opts.type === 'cover') {
        this.cover();
      } else if (this.opts.type === 'contain') {
        this.contain();
      }
      return this;
    };

    return Fit;

  })();
});
