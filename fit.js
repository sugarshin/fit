// Generated by CoffeeScript 1.9.0
(function(root, factory) {
  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = factory(require('jquery'), require('throttle-debounce'));
  } else {
    root.Fit || (root.Fit = factory(root.jQuery));
  }
})(this, function($, td) {
  "use strict";
  var Fit;
  if (td === void 0) {
    td = $;
  }
  return Fit = (function() {
    var _$window;

    _$window = $(window);

    Fit.prototype._defaults = {
      type: 'cover',
      ratio: 0.5625,
      parent: 'window',
      lineHeight: false,
      delay: 400,
      delayType: 'throttle'
    };

    Fit.prototype._getRandomString = (function() {
      var chars;
      chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghiklmnopqrstuvwxyz';
      return function(length) {
        var i, randomNumber, string, _i;
        if (length == null) {
          length = 32;
        }
        string = '';
        for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
          randomNumber = Math.floor(Math.random() * chars.length);
          string += chars.substring(randomNumber, randomNumber + 1);
        }
        return string;
      };
    })();

    Fit.prototype._configure = function(el, opts) {
      var $parent;
      this.$el = $(el);
      this.opts = $.extend({}, this._defaults, opts);
      this._$parent = $((this.opts.parent === 'window' ? window : this.opts.parent));
      this._namespace = this._getRandomString();
      this.$el.css({
        position: 'absolute',
        top: '50%',
        left: '50%',
        height: '100%'
      });
      $parent = this.opts.parent === 'window' ? $('body') : this._$parent;
      return $parent.css({
        position: 'relative',
        overflow: 'hidden'
      });
    };

    function Fit(_at_el, opts) {
      this.el = _at_el;
      this._configure(this.el, opts);
      this.events();
      this.resize();
    }

    Fit.prototype.setParentSize = function(which, val) {
      if (val == null) {
        val = null;
      }
      if (which === 'width') {
        if (val == null) {
          this._parentWidth = this._$parent.width();
        } else {
          this._parentWidth = val;
        }
      } else if (which === 'height') {
        if (val == null) {
          this._parentHeight = this._$parent.height();
        } else {
          this._parentHeight = val;
        }
      } else {
        this._parentWidth = this._$parent.width();
        this._parentHeight = this._$parent.height();
      }
      return this;
    };

    Fit.prototype.getParentSize = function(which) {
      if (which === 'width') {
        return this._parentWidth;
      } else if (which === 'height') {
        return this._parentHeight;
      } else {

      }
    };

    Fit.prototype._calcCover = function() {
      var parentHeight, parentRatio, parentWidth;
      parentWidth = this.getParentSize('width');
      parentHeight = this.getParentSize('height');
      parentRatio = parentHeight / parentWidth;
      if (this.opts.ratio > parentRatio) {
        this._width = parentWidth;
      } else {
        this._width = parentHeight / this.opts.ratio;
      }
      this._height = this._width * this.opts.ratio;
      this._marginTop = -(this._height / 2);
      this._marginLeft = -(this._width / 2);
      return this;
    };

    Fit.prototype._calcContain = function() {
      var parentHeight, parentRatio, parentWidth;
      parentWidth = this.getParentSize('width');
      parentHeight = this.getParentSize('height');
      parentRatio = parentHeight / parentWidth;
      if (this.opts.ratio > parentRatio) {
        this._height = parentHeight;
        this._width = this._height / this.opts.ratio;
        this._marginTop = -(parentHeight / 2);
        this._marginLeft = -(this._width / 2);
      } else {
        this._width = parentWidth;
        this._height = this._width * this.opts.ratio;
        this._marginTop = -(this._height / 2);
        this._marginLeft = -(parentWidth / 2);
      }
      return this;
    };

    Fit.prototype.resize = function() {
      this.setParentSize();
      if (this.opts.type === 'cover') {
        this._calcCover();
      } else if (this.opts.type === 'contain') {
        this._calcContain();
      }
      this.$el.css({
        width: this._width,
        height: this._height,
        marginTop: this._marginTop,
        marginLeft: this._marginLeft
      });
      if (this.opts.lineHeight === true) {
        this.$el.css('line-height', this._height + "px");
      }
      return this;
    };

    Fit.prototype.events = function() {
      _$window.on("resize.fit:" + this._namespace, td[this.opts.delayType](this.opts.delay, (function(_this) {
        return function() {
          return _this.resize();
        };
      })(this)));
      return this;
    };

    Fit.prototype.unbind = function() {
      _$window.off("resize.fit:" + this._namespace);
      return this;
    };

    return Fit;

  })();
});
